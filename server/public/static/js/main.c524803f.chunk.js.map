{"version":3,"sources":["client.ts","atoms.ts","selectors.ts","useListItems.ts","constants.ts","ShoppingList.tsx","ListConfig.tsx","useProducts.ts","useShoppingLists.ts","Menu.tsx","Navbar.tsx","AppPage.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["BASE_API","process","postEvent","event","fetch","method","body","JSON","stringify","headers","postNewProduct","newProductName","newProductCategory","name","category","productsState","atom","key","default","shoppingListState","listIdState","listDataState","Map","listItemsState","selector","get","id","items","console","log","useListItems","useRecoilState","listData","setListItems","useState","listening","setListening","listId","useRecoilValue","listItems","useEffect","eventSource","EventSource","onmessage","a","parsedData","parse","data","jsonResponse","Response","map","Object","entries","window","caches","open","cache","put","catch","e","onerror","error","match","json","jsonData","newItems","item","checked","newMap","set","CATEGORY_ORDER","useStyles","makeStyles","theme","listItemChecked","background","palette","secondary","light","textDecoration","list","overflow","maxHeight","button","marginTop","listItemText","display","marginLeft","ShoppingList","props","setListId","checkListItem","displayDoneItems","setDisplayDoneItems","Box","p","align","component","Link","to","List","className","slice","filter","sort","b","indexOf","ListItem","onClick","payload","list_id","product_id","type","handleClick","clsx","ListItemIcon","ListItemText","primary","quantity","justifyContent","Button","chipContainer","height","overflowX","ListConfig","activeCategories","setCategories","products","categories","Array","from","Set","alignItems","flexDirection","flexWrap","Chip","icon","label","color","includes","updatedCategories","c","handleCategoryClick","clickable","product","length","selected","some","find","onSwipedLeft","decreaseQuantity","onSwipedRight","increaseQuantity","trackMouse","focusVisibleClassName","useProducts","setProducts","then","res","newProducts","String","product_name","i","useShoppingLists","shoppingLists","setShoppingLists","root","width","maxWidth","backgroundColor","paper","nested","paddingLeft","spacing","isDeleted","dark","Menu","classes","React","setOpen","dialogOpen","setDialogOpen","deleteOpen","setDeleteOpen","newProductOpen","handleNewProductOpen","newListTitle","setNewListTitle","listToDelete","selectListToDelete","setNewProductName","setNewProductCategory","refetchProducts","refetchShoppingLists","handleDialogClose","handleDeleteClose","handleNewList","trim","handleListDelete","handleNewProduct","aria-label","Collapse","in","timeout","unmountOnExit","disablePadding","Divider","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","value","fullWidth","onChange","target","DialogActions","Select","evt","MenuItem","menuButton","marginRight","title","flexGrow","Navbar","AppBar","position","Toolbar","IconButton","navigate","edge","Typography","variant","page","boxSizing","padding","paddingBottom","AppPage","path","createMuiTheme","main","typography","fontFamily","responsiveFontSizes","App","ThemeProvider","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c524803f.chunk.js","sourcesContent":["import { IApiProduct } from \"./interfaces\"\n\nconst BASE_API = process.env.REACT_APP_BASE_URL\n\nexport const postEvent = (event: any) => {\n    return fetch(`${BASE_API}/events`, {\n        method: 'POST',\n        body: JSON.stringify(event),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n}\n\nexport const createEventSource = () => new EventSource(`${BASE_API}/list-data`)\n\nexport const getShoppingLists = () => fetch(`${BASE_API}/lists`).then((res) => res.json())\n\nexport const getProducts = (): Promise<{ data: IApiProduct[] }> => fetch(`${BASE_API}/products`).then((res) => res.json())\n\nexport const postNewProduct = ({ newProductName , newProductCategory } : { newProductName: string, newProductCategory: string }) => fetch(`${BASE_API}/products`,\n    {\n        method: 'POST',\n        body : JSON.stringify({\n            name: newProductName,\n            category: newProductCategory\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })","import { atom } from 'recoil'\nimport { IProduct, IShoppingList, IShoppingItem } from './interfaces';\n\nexport const productsState = atom<IProduct[]>({\n  key: 'products', // unique ID (with respect to other atoms/selectors)\n  default: [], // default value (aka initial value)\n});\n\nexport const shoppingListState = atom<IShoppingList[]>({\n  key: 'shoppingList', // unique ID (with respect to other atoms/selectors)\n  default: [], // default value (aka initial value)\n});\n\nexport const listIdState = atom<string>({\n  key: 'listId', // unique ID (with respect to other atoms/selectors)\n  default: '1', // default value (aka initial value)\n})\n\nexport const listDataState = atom<Map<string,IShoppingItem[]>>({\n  key: 'listData', // unique ID (with respect to other atoms/selectors)\n  default: new Map(), // default value (aka initial value)\n})","import { selector } from 'recoil' \nimport { listIdState, listDataState } from './atoms'\nimport { IShoppingItem } from './interfaces';\n\nexport const listItemsState = selector<IShoppingItem[]>({\n  key: 'listItems', \n  get: ({get} : any) => {\n    const id = get(listIdState);\n    const listData = get(listDataState) \n\n    const items = listData.get(id) || [] as IShoppingItem[]\n    console.log(items)\n    return items;\n  },\n});","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useState, useEffect } from \"react\";\nimport { listDataState, listIdState } from \"./atoms\";\nimport { createEventSource } from \"./client\";\nimport { listItemsState } from \"./selectors\";\nimport { IShoppingItem } from \"./interfaces\";\n\nconst useListItems : () => (id: string) => void = () => {\n  const [listData, setListItems] = useRecoilState(listDataState);\n  const [listening, setListening] = useState(false);\n  const listId = useRecoilValue(listIdState)\n  const listItems = useRecoilValue(listItemsState)\n\n  useEffect(() => {\n    if (!listening) {\n      const eventSource = createEventSource() \n      eventSource.onmessage = async (event) => {\n        const parsedData = JSON.parse(event.data) as any\n        const jsonResponse = new Response(event.data, {\n          headers: {\n            'content-type': 'application/json'\n          }\n        })\n        const map = new Map(Object.entries(parsedData)) as Map<string, IShoppingItem[]>\n        setListItems(map);\n        //update cache if we have access to it\n        if(window.caches) {\n          const cache = await window.caches.open('shoppinglist')\n          await cache.put(`/events/${listId}`, jsonResponse ).catch(e => console.log(e))\n        }\n      };\n      eventSource.onerror = async (error) => {\n        //use cache if we have access to it\n        if(window.caches) {\n          const data = await window.caches.match(`/events/${listId}`)\n          const jsonData = await data?.json()\n          const map = new Map(Object.entries(jsonData)) as Map<string, IShoppingItem[]>\n          setListItems(map);\n        }\n      }\n      \n      setListening(true);\n    }\n  }, [listening, listId]);\n\n  const checkListItem = (id: string) => {\n    const newItems = listItems.map(item => item.id === id ? ({ ...item, checked: !item.checked }) : item)\n    const newMap = new Map(listData)\n    newMap.set(listId,newItems) \n    setListItems(newMap)\n  }\n\n  return checkListItem \n}\n\nexport default useListItems","\nexport const CATEGORY_ORDER = [\n  'Obst',\n  'Gemüse',\n  'Kühlwaren',\n  'Fleisch',\n  'TK',\n  'Konserven',\n  'Trockenware',\n  'Würzwaren',\n  'Backwaren',\n  'Backzutaten',\n  'Getränke',\n  'Snacks',\n  'Drogerie'\n]","import React, { useEffect, useState } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { RouteComponentProps, Link } from \"@reach/router\"\nimport { IShoppingItem } from './interfaces'\nimport ListItem from '@material-ui/core/ListItem'\nimport MuiLink from '@material-ui/core/Link'\nimport List from '@material-ui/core/List'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport LocalCafeIcon from '@material-ui/icons/LocalCafe'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport { postEvent } from './client'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { listIdState } from './atoms'\nimport { listItemsState } from './selectors'\nimport useListItems from './useListItems'\nimport { CATEGORY_ORDER } from './constants'\nimport { Button } from '@material-ui/core'\n\ninterface ShoppingListProps extends RouteComponentProps {\n  id?: string\n}\n\nconst useStyles = makeStyles((theme) => {\n  return ({\n    listItemChecked: {\n      background: theme.palette.secondary.light!,\n      textDecoration: 'line-through'\n    },\n    list: {\n      overflow: 'auto',\n      maxHeight: 'calc(100vh - 140px)'\n    },\n    button: {\n      marginTop: 'auto'\n    },\n    listItemText: {\n      display: 'flex',\n      '& .MuiListItemText-secondary': {\n        marginLeft: '1em'\n      }\n    }\n  })\n});\n\nexport default function ShoppingList(props: ShoppingListProps) {\n  const [listId, setListId] = useRecoilState(listIdState)\n  const listItems = useRecoilValue(listItemsState)\n  const { listItemChecked, list, button, listItemText } = useStyles()\n  const checkListItem = useListItems()\n  const [displayDoneItems, setDisplayDoneItems] = useState(false)\n\n  useEffect(() => {\n    //check if list id from route is the same as current list id,\n    //if not then change it to the currently selected\n    if (props.id && props.id !== listId) setListId(props.id)\n  }, [listId, setListId, props.id])\n\n  const handleClick = (item: IShoppingItem) => {\n    checkListItem(item.id)\n    const payload = {\n      list_id: listId,\n      product_id: item.id,\n      type: ''\n    }\n    if (item.checked) {\n      payload.type = 'item_unchecked'\n    } else {\n      payload.type = 'item_checked'\n    }\n    return postEvent(payload);\n  }\n\n  return (\n    <Box>\n      <Box p={2} >\n        <MuiLink align='center' display='block' component={Link} to='edit'>Bearbeiten</MuiLink>\n      </Box>\n      <List className={list}>\n        {\n          listItems.slice()\n            .filter(item => displayDoneItems ? !item.checked : true)\n            .sort((a, b) =>\n              CATEGORY_ORDER.indexOf(a.category) - CATEGORY_ORDER.indexOf(b.category)\n            )\n            .map((item) => {\n              return (\n                <ListItem onClick={() => handleClick(item)} key={item.id} className={clsx(item.checked ? listItemChecked : '')} >\n                  <ListItemIcon>\n                    <LocalCafeIcon />\n                  </ListItemIcon>\n                  <ListItemText className={listItemText} primary={item.name} secondary={item.quantity} />\n                </ListItem>\n              )\n            })\n        }\n      </List>\n      <Box className={button} display='flex' justifyContent='center'>\n        <Button onClick={() => setDisplayDoneItems(!displayDoneItems)}>\n          {displayDoneItems ? 'Fertige einblenden' : 'Fertige ausblenden'}\n        </Button>\n      </Box>\n    </Box>\n  )\n}","import React, { useState } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { RouteComponentProps, Link } from \"@reach/router\"\nimport { IProduct } from './interfaces'\nimport { postEvent } from './client'\nimport ListItem from '@material-ui/core/ListItem'\nimport MuiLink from '@material-ui/core/Link'\nimport List from '@material-ui/core/List'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckIcon from '@material-ui/icons/Check'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport LocalCafeIcon from '@material-ui/icons/LocalCafe'\nimport Chip from '@material-ui/core/Chip'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport { useRecoilValue } from 'recoil'\nimport { productsState, listIdState } from './atoms'\nimport { listItemsState } from './selectors'\nimport { Swipeable } from 'react-swipeable'\nimport { CATEGORY_ORDER } from './constants'\n\ninterface ListConfigProps extends RouteComponentProps { }\n\nconst useStyles = makeStyles((theme) => {\n  return ({\n    listItemChecked: {\n      background: theme.palette.secondary.light!\n    },\n    chipContainer: {\n      height: '68px',\n      overflowX: 'scroll',\n    },\n    list: {\n      overflow: 'auto',\n      maxHeight: 'calc(100vh - 185px)'\n    },\n    listItemText: {\n      display: 'flex',\n      '& .MuiListItemText-secondary': {\n        marginLeft: '1em'\n      }\n    }\n  })\n});\n\n\nexport default function ListConfig(props: ListConfigProps) {\n  const { listItemChecked, chipContainer, list , listItemText } = useStyles()\n  const [activeCategories, setCategories] = useState<string[]>([])\n  const products = useRecoilValue(productsState)\n  const listItems = useRecoilValue(listItemsState)\n  const listId = useRecoilValue(listIdState)\n\n  // const handleClick = (product: IProduct) => {\n  //   const payload = {\n  //     list_id: listId,\n  //     product_id: product.id,\n  //     type: ''\n  //   }\n  //   const selected = listItems.some(item => item.id === product.id)\n  //   if (selected) {\n  //     payload.type = 'item_removed'\n  //   } else {\n  //     payload.type = 'item_added'\n  //   }\n  //   return postEvent(payload);\n  // }\n\n  const increaseQuantity = (product: IProduct) => {\n    const item = listItems.find(item => item.id === product.id)\n    if (!item) {\n      return postEvent({\n        list_id: listId,\n        product_id: product.id,\n        type: 'item_added'\n      })\n    }\n    return postEvent({\n      list_id: listId,\n      product_id: product.id,\n      type: 'quantity_inc'\n    })\n  }\n\n  const decreaseQuantity = (product: IProduct) => {\n    const item = listItems.find(item => item.id === product.id)\n    if (item?.quantity! == 1) {\n      return postEvent({\n        list_id: listId,\n        product_id: product.id,\n        type: 'item_removed'\n      })\n    }\n    if (item?.quantity! > 1) {\n      return postEvent({\n        list_id: listId,\n        product_id: product.id,\n        type: 'quantity_dec'\n      })\n    }\n  }\n\n  const handleCategoryClick = (category: string) => {\n    const updatedCategories = activeCategories.includes(category) ? activeCategories.filter(c => c !== category) : [category]\n    return setCategories(updatedCategories)\n  }\n  const categories = Array.from(new Set(products.map(p => p.category)))\n\n  return (\n    <Box>\n      <Box p={2}>\n        <MuiLink align='center' display='block' component={Link} to={`/list/${listId}`}>Fertig</MuiLink>\n      </Box>\n      <Box p={1} display='flex' justifyContent='space-between' alignItems='space-between' flexDirection='column' flexWrap='wrap' className={chipContainer}>\n        {categories\n          .sort((a, b) =>\n            CATEGORY_ORDER.indexOf(a) - CATEGORY_ORDER.indexOf(b)\n          )\n          .map(category =>\n            <Chip key={category}\n              icon={<LocalCafeIcon />}\n              label={category}\n              color={activeCategories.includes(category) ? 'primary' : 'default'}\n              onClick={() => handleCategoryClick(category)}\n              clickable\n            />\n          )}\n      </Box>\n      <List className={list}>\n        {\n          products\n            .filter((product: IProduct) => activeCategories.length > 0 ? activeCategories.includes(product.category) : true)\n            .sort((a, b) =>\n              CATEGORY_ORDER.indexOf(a.category) - CATEGORY_ORDER.indexOf(b.category)\n            )\n            .map((product: IProduct) => {\n              const selected = listItems.some(item => item.id === product.id)\n              const quantity = listItems.find(item => item.id === product.id)?.quantity\n              return (\n              <Swipeable\n                onSwipedLeft={() =>  decreaseQuantity(product)}\n                onSwipedRight={() => increaseQuantity(product)}\n                trackMouse\n              >\n                <ListItem\n                  button\n                  // classes={{\n                  //   focusVisible: selected ? listItemChecked : ''\n                  // }}\n                  focusVisibleClassName={selected ? listItemChecked : ''}\n                  className={clsx(selected ? listItemChecked : '')}\n                  key={product.id}\n                >\n                  <ListItemIcon>\n                    <LocalCafeIcon />\n                  </ListItemIcon>\n                  <ListItemText className={listItemText} primary={product.name} secondary={selected ? quantity : ''} />{selected && <CheckIcon />}\n                </ListItem>\n                </Swipeable>\n              )\n            })\n        }\n      </List>\n    </Box>\n  )\n}\n\n","import { useRecoilState, useRecoilValue } from \"recoil\"\nimport { productsState } from \"./atoms\"\nimport { getProducts } from \"./client\"\nimport { IProduct, IShoppingItem } from \"./interfaces\"\nimport { listItemsState } from \"./selectors\"\n\n\nconst useProducts : () => [IProduct[], () => void] = () => {\n  const listItems = useRecoilValue(listItemsState)\n  const [products, setProducts] = useRecoilState(productsState)\n\n  const refetchProducts = () => {\n    getProducts()\n      .then(res => {\n        const newProducts: IProduct[] = res.data\n          .map(product => {\n            return ({\n              id: String(product.id),\n              name: product.product_name,\n              category: product.category,\n              selected: listItems.some(i => i.id === `${product.id}`)\n            })\n          })\n        setProducts(newProducts)\n      })\n  }\n\n  return [products, refetchProducts]\n}  \n\nexport default useProducts","import { useRecoilState } from \"recoil\"\nimport { shoppingListState } from \"./atoms\"\nimport { getShoppingLists } from \"./client\"\nimport { useEffect } from \"react\"\nimport { IShoppingList } from \"./interfaces\"\n\nconst useShoppingLists : () => [IShoppingList[], () => void ] = () => {\n  const [shoppingLists, setShoppingLists] = useRecoilState(shoppingListState) \n\n  const refetchShoppingLists = () => {\n    getShoppingLists()\n    .then((res) => setShoppingLists(res.data))\n  }\n\n  return [shoppingLists, refetchShoppingLists]\n}\n\nexport default useShoppingLists","import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport ListItem from '@material-ui/core/ListItem'\nimport List from '@material-ui/core/List'\nimport { RouteComponentProps } from \"@reach/router\"\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport AddIcon from '@material-ui/icons/Add'\nimport ListIcon from '@material-ui/icons/List'\nimport { ListItemText } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider'\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport Collapse from '@material-ui/core/Collapse';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { IShoppingList } from './interfaces'\nimport { Link } from '@reach/router'\nimport { postEvent, getShoppingLists, postNewProduct } from './client'\nimport { useRecoilValue, useRecoilState } from 'recoil'\nimport { shoppingListState } from './atoms'\nimport useProducts from './useProducts'\nimport useShoppingLists from './useShoppingLists'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n  isDeleted: {\n    backgroundColor: theme.palette.secondary.dark,\n  }\n}));\n\ninterface MenuProps extends RouteComponentProps { }\n\nexport default function Menu(props: MenuProps) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n  const [deleteOpen, setDeleteOpen] = React.useState(false);\n  const [newProductOpen, handleNewProductOpen] = React.useState(false) \n  const [newListTitle, setNewListTitle] = React.useState('')\n  const [listToDelete, selectListToDelete] = React.useState('')\n  const [newProductName, setNewProductName ] = React.useState('')\n  const [newProductCategory, setNewProductCategory ] = React.useState('')\n  const [products, refetchProducts] = useProducts()\n  const [shoppingLists, refetchShoppingLists] = useShoppingLists()\n\n  const handleDialogOpen = () => setDialogOpen(true);\n  const handleDialogClose = () => setDialogOpen(false);\n  const handleDeleteOpen = () => setDeleteOpen(true);\n\n  const handleDeleteClose = () => {\n    setDeleteOpen(false);\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const handleNewList = async () => {\n    handleDialogClose()\n    if (!newListTitle.trim()) return;\n    setNewListTitle('')\n    const payload = {\n      type: 'list_added',\n      name: newListTitle,\n    }\n    await postEvent(payload);\n    return refetchShoppingLists()\n  }\n\n  const handleListDelete = async () => {\n    handleDeleteClose()\n    if (!listToDelete.trim()) return;\n    selectListToDelete('')\n    const payload = {\n      type: 'list_removed',\n      list_id: listToDelete\n    }\n    refetchShoppingLists()\n    await postEvent(payload);\n    return refetchShoppingLists()\n  }\n\n  const handleNewProduct = async () => {\n    handleNewProductOpen(false)\n    if (!newProductName.trim()) return;\n    if (!newProductCategory.trim()) return;\n    setNewProductName('')\n    setNewProductCategory('')\n    await postNewProduct({ newProductName, newProductCategory })\n    return refetchProducts() \n  }\n\n  return (\n    <Box className={classes.root}>\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\n        <ListItem button>\n          <ListItemIcon>\n            <AddIcon />\n          </ListItemIcon>\n          <ListItemText onClick={handleDialogOpen} primary=\"Neuer Einkaufszettel\" />\n        </ListItem>\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon>\n            <ListIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Einkaufslisten\" />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding>\n            {\n              shoppingLists.map(list => {\n                return (\n                  <ListItem key={list.id} component={Link} to={`/list/${list.id}`} button className={classes.nested}>\n                    <ListItemIcon>\n                      <StarBorder />\n                    </ListItemIcon>\n                    <ListItemText primary={list.name} />\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n        </Collapse>\n      </List>\n      <Divider />\n      <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n        <ListItem button>\n          <ListItemText onClick={handleDeleteOpen} primary=\"Löschen\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemText onClick={() => handleNewProductOpen(true)} primary=\"Neues Produkt\" />\n        </ListItem>\n      </List>\n      <Dialog open={dialogOpen} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Neue Liste</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Bitte gib den Namen deiner Einkaufsliste ein.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            value={newListTitle}\n            label=\"Name\"\n            type=\"name\"\n            fullWidth\n            onChange={(event) => setNewListTitle(event.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} color=\"primary\">\n            Zurück\n          </Button>\n          <Button onClick={handleNewList} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={deleteOpen} onClose={handleDeleteClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Liste löschen</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Welche Liste möchtest du löschen?\n          </DialogContentText>\n          <List>\n            {shoppingLists.map(list => {\n              const isDeleted = listToDelete === list.id\n              return (\n                <ListItem key={list.id} onClick={() => selectListToDelete(list.id)} button className={isDeleted ? classes.isDeleted : ''}>\n                  <ListItemIcon>\n                    <StarBorder />\n                  </ListItemIcon>\n                  <ListItemText primary={list.name} />\n                </ListItem>\n              )\n            })\n            }\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteClose} color=\"primary\">\n            Zurück\n          </Button>\n          <Button onClick={handleListDelete} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={newProductOpen} onClose={handleNewProductOpen} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Neues Produkt</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Bitte gib den Namen des neuen Produkts ein.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            value={newProductName}\n            label=\"Name\"\n            type=\"name\"\n            fullWidth\n            onChange={(event) => setNewProductName(event.target.value)}\n          />\n          <DialogContentText>\n            Bitte gib die Kategorie des neuen Produkts an\n          </DialogContentText>\n          <Select \n            id='category'\n            value={newProductCategory}\n            onChange={(evt) =>\n              { \n                const category = evt.target.value as string\n                setNewProductCategory(category)\n            }}\n          >\n            <MenuItem value='TK'>TK</MenuItem>\n            <MenuItem value='Backwaren'>Backwaren</MenuItem>\n            <MenuItem value='Kühlwaren'>Kühlwaren</MenuItem>\n            <MenuItem value='Getränke'>Getränke</MenuItem>\n            <MenuItem value='Trockenware'>Trockenware</MenuItem>\n            <MenuItem value='Obst & Gemüse'>Obst & Gemüse</MenuItem>\n            <MenuItem value='Drogerie'>Drogerie</MenuItem>\n            <MenuItem value='Snacks'>Snacks</MenuItem>\n          </Select>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => handleNewProductOpen(false)} color=\"primary\">\n            Zurück\n          </Button>\n          <Button onClick={handleNewProduct} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  )\n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Box from '@material-ui/core/Box'\nimport { navigate } from '@reach/router'\n\nconst useStyles = makeStyles((theme) => ({\n\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles()\n\n  return (\n    <Box flexGrow={1} >\n      <AppBar position=\"static\">\n        <Toolbar>\n             <IconButton onClick={() => navigate('/menu')} edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" >\n              <MenuIcon />\n             </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Einkaufsliste\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </Box>\n      )\n} ","import React from 'react'\nimport { Router } from '@reach/router'\nimport ShoppingList from './ShoppingList'\nimport ListConfig from './ListConfig'\nimport Menu from './Menu'\nimport Navbar from './Navbar'\nimport { IShoppingItem, IShoppingList, IProduct } from './interfaces'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/core'\n\ninterface AppPageProps { }\n\nconst useStyles = makeStyles(() => ({\n    page: {\n        boxSizing: 'border-box',\n        margin: '0',\n        padding: '0',\n        maxHeight: '100vh',\n        position: 'relative',\n        paddingBottom: '10vh'\n    }\n}))\n\nexport default function AppPage(props: AppPageProps) {\n    const { page } = useStyles()\n    return (\n        <Box className={page}>\n            <Navbar />\n            <Router >\n                <ShoppingList path=\"/list/:id\" />\n                <ListConfig path=\"/list/:id/edit\" />\n                <Menu  path=\"/menu\" />\n            </Router>\n        </Box>\n    )\n}","import React from 'react';\nimport { useEffect } from 'react'\nimport { ThemeProvider, createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\nimport AppPage from './AppPage'\nimport './App.css';\nimport useProducts from './useProducts';\nimport useListItems from './useListItems';\nimport useShoppingLists from './useShoppingLists';\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#57DBBE',\n      light: '#80FFE3'\n    },\n    secondary: {\n      main: '#915540',\n      light: '#DF9379'\n    }\n  },\n  typography: {\n    fontFamily: \n      `\n      Roboto Mono,\n      Roboto,\n      sans-serif\n      `\n  }\n})\ntheme = responsiveFontSizes(theme)\n\n\nfunction App() {\n  const [products, refetchProducts] = useProducts()\n  const [shoppingLists ,refetchShoppingLists ] = useShoppingLists()\n  useListItems()\n\n  useEffect(() => {\n    refetchProducts()\n    refetchShoppingLists()\n  },[])\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppPage />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { RecoilRoot } from 'recoil'\nimport * as serviceWorker from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}