{"version":3,"sources":["client.ts","atoms.ts","selectors.ts","useListItems.ts","constants.ts","ShoppingList.tsx","ListConfig.tsx","useProducts.ts","useShoppingLists.ts","Menu.tsx","Navbar.tsx","AppPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_API","process","postEvent","event","fetch","method","body","JSON","stringify","headers","postNewProduct","newProductName","newProductCategory","name","category","productsState","atom","key","default","shoppingListState","listIdState","listDataState","Map","listItemsState","selector","get","id","useListItems","useRecoilState","listData","setListItems","useState","listening","setListening","listId","useRecoilValue","listItems","useEffect","eventSource","EventSource","onmessage","a","parsedData","parse","data","jsonResponse","Response","map","Object","entries","window","caches","open","cache","put","catch","e","console","log","onerror","error","match","json","jsonData","newItems","item","checked","updatedMap","set","CATEGORY_ORDER","useStyles","makeStyles","theme","listItemChecked","background","palette","secondary","light","textDecoration","list","overflow","maxHeight","button","marginTop","ShoppingList","props","setListId","checkListItem","displayDoneItems","setDisplayDoneItems","Box","p","align","display","component","Link","to","List","className","slice","filter","sort","b","indexOf","ListItem","onClick","payload","list_id","product_id","type","handleClick","clsx","ListItemIcon","ListItemText","primary","justifyContent","Button","chipContainer","height","overflowX","ListConfig","activeCategories","setCategories","products","categories","Array","from","Set","alignItems","flexDirection","flexWrap","Chip","icon","label","color","includes","updatedCategories","c","handleCategoryClick","clickable","product","length","selected","some","useProducts","setProducts","then","res","newProducts","String","product_name","i","useShoppingLists","shoppingLists","setShoppingLists","root","width","maxWidth","backgroundColor","paper","nested","paddingLeft","spacing","isDeleted","dark","Menu","classes","React","setOpen","dialogOpen","setDialogOpen","deleteOpen","setDeleteOpen","newProductOpen","handleNewProductOpen","newListTitle","setNewListTitle","listToDelete","selectListToDelete","setNewProductName","setNewProductCategory","refetchProducts","refetchShoppingLists","handleDialogClose","handleDeleteClose","handleNewList","trim","handleListDelete","handleNewProduct","aria-label","Collapse","in","timeout","unmountOnExit","disablePadding","Divider","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","value","fullWidth","onChange","target","DialogActions","Select","evt","MenuItem","menuButton","marginRight","title","flexGrow","Navbar","AppBar","position","Toolbar","IconButton","navigate","edge","Typography","variant","page","boxSizing","padding","paddingBottom","AppPage","path","createMuiTheme","main","typography","fontFamily","responsiveFontSizes","App","ThemeProvider","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f69e40c0.chunk.js","sourcesContent":["import { IApiProduct } from \"./interfaces\"\n\nconst BASE_API = process.env.REACT_APP_BASE_URL\n\nexport const postEvent = (event: any) => {\n    return fetch(`${BASE_API}/events`, {\n        method: 'POST',\n        body: JSON.stringify(event),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\n}\n\nexport const createEventSource = () => new EventSource(`${BASE_API}/list-data`)\n\nexport const getShoppingLists = () => fetch(`${BASE_API}/lists`).then((res) => res.json())\n\nexport const getProducts = (): Promise<{ data: IApiProduct[] }> => fetch(`${BASE_API}/products`).then((res) => res.json())\n\nexport const postNewProduct = ({ newProductName , newProductCategory } : { newProductName: string, newProductCategory: string }) => fetch(`${BASE_API}/products`,\n    {\n        method: 'POST',\n        body : JSON.stringify({\n            name: newProductName,\n            category: newProductCategory\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })","import { atom } from 'recoil'\nimport { IProduct, IShoppingList, IShoppingItem } from './interfaces';\n\nexport const productsState = atom<IProduct[]>({\n  key: 'products', // unique ID (with respect to other atoms/selectors)\n  default: [], // default value (aka initial value)\n});\n\nexport const shoppingListState = atom<IShoppingList[]>({\n  key: 'shoppingList', // unique ID (with respect to other atoms/selectors)\n  default: [], // default value (aka initial value)\n});\n\nexport const listIdState = atom<string>({\n  key: 'listId', // unique ID (with respect to other atoms/selectors)\n  default: '1', // default value (aka initial value)\n})\n\nexport const listDataState = atom<Map<string,IShoppingItem[]>>({\n  key: 'listData', // unique ID (with respect to other atoms/selectors)\n  default: new Map(), // default value (aka initial value)\n})","import { selector } from 'recoil' \nimport { listIdState, listDataState } from './atoms'\nimport { IShoppingItem } from './interfaces';\n\nexport const listItemsState = selector<IShoppingItem[]>({\n  key: 'listItems', \n  get: ({get} : any) => {\n    const id = get(listIdState);\n    const listData = get(listDataState) \n\n    const items = listData.get(id) || [] as IShoppingItem[]\n    return items;\n  },\n});","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useState, useEffect } from \"react\";\nimport { listDataState, listIdState } from \"./atoms\";\nimport { createEventSource } from \"./client\";\nimport { listItemsState } from \"./selectors\";\n\nconst useListItems : () => (id: string) => void = () => {\n  const [listData, setListItems] = useRecoilState(listDataState);\n  const [listening, setListening] = useState(false);\n  const listId = useRecoilValue(listIdState)\n  const listItems = useRecoilValue(listItemsState)\n\n  useEffect(() => {\n    if (!listening) {\n      const eventSource = createEventSource() \n      eventSource.onmessage = async (event) => {\n        const parsedData = JSON.parse(event.data) as any\n        const jsonResponse = new Response(event.data, {\n          headers: {\n            'content-type': 'application/json'\n          }\n        })\n        const map = new Map(Object.entries(parsedData))\n        setListItems(map);\n        //update cache if we have access to it\n        if(window.caches) {\n          const cache = await window.caches.open('shoppinglist')\n          await cache.put(`/events/${listId}`, jsonResponse ).catch(e => console.log(e))\n        }\n      };\n      eventSource.onerror = async (error) => {\n        //use cache if we have access to it\n        if(window.caches) {\n          const data = await window.caches.match(`/events/${listId}`)\n          const jsonData = await data?.json()\n          const map = new Map(Object.entries(jsonData))\n          setListItems(map);\n        }\n      }\n      \n      setListening(true);\n    }\n  }, [listening, listData, listId]);\n\n  const checkListItem = (id: string) => {\n    const newItems = listItems.map(item => item.id === id ? ({ ...item, checked: !item.checked }) : item)\n    const updatedMap = listData.set(listId,newItems) \n    setListItems(updatedMap)\n  }\n\n  return checkListItem \n}\n\nexport default useListItems","\nexport const CATEGORY_ORDER = [\n  'Obst & Gemüse',\n  'Kühlwaren',\n  'Trockenware',\n  'Getränke',\n  'TK',\n  'Backwaren',\n  'Snacks',\n  'Drogerie'\n]","import React, { useEffect, useState } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { RouteComponentProps, Link } from \"@reach/router\"\nimport { IShoppingItem } from './interfaces'\nimport ListItem from '@material-ui/core/ListItem'\nimport MuiLink from '@material-ui/core/Link'\nimport List from '@material-ui/core/List'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport LocalCafeIcon from '@material-ui/icons/LocalCafe'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport { postEvent } from './client'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { listIdState } from './atoms'\nimport { listItemsState } from './selectors'\nimport useListItems from './useListItems'\nimport { CATEGORY_ORDER } from './constants'\nimport { Button } from '@material-ui/core'\n\ninterface ShoppingListProps extends RouteComponentProps {\n  id?: string\n}\n\nconst useStyles = makeStyles((theme) => {\n  return ({\n    listItemChecked: {\n      background: theme.palette.secondary.light!,\n      textDecoration: 'line-through'\n    },\n    list: {\n      overflow: 'auto',\n      maxHeight: 'calc(100vh - 140px)'\n    },\n    button: {\n      marginTop: 'auto'\n    }\n  })\n});\n\nexport default function ShoppingList(props: ShoppingListProps) {\n  const [listId, setListId] = useRecoilState(listIdState)\n  const listItems = useRecoilValue(listItemsState)\n  const { listItemChecked, list, button } = useStyles()\n  const checkListItem = useListItems()\n  const [displayDoneItems, setDisplayDoneItems] = useState(false)\n\n  useEffect(() => {\n    //check if list id from route is the same as current list id,\n    //if not then change it to the currently selected\n    if (props.id && props.id !== listId) setListId(props.id)\n  }, [listId, setListId, props.id])\n\n  const handleClick = (item: IShoppingItem) => {\n    checkListItem(item.id)\n    const payload = {\n      list_id: listId,\n      product_id: item.id,\n      type: ''\n    }\n    if (item.checked) {\n      payload.type = 'item_unchecked'\n    } else {\n      payload.type = 'item_checked'\n    }\n    return postEvent(payload);\n  }\n\n  return (\n    <Box>\n      <Box p={2} >\n        <MuiLink align='center' display='block' component={Link} to='edit'>Bearbeiten</MuiLink>\n      </Box>\n      <List className={list}>\n        {\n          listItems.slice()\n            .filter(item => displayDoneItems ? !item.checked : true)\n            .sort((a, b) =>\n              CATEGORY_ORDER.indexOf(a.category) - CATEGORY_ORDER.indexOf(b.category)\n            )\n            .map((item) => {\n              return (\n                <ListItem onClick={() => handleClick(item)} key={item.id} className={clsx(item.checked ? listItemChecked : '')} >\n                  <ListItemIcon>\n                    <LocalCafeIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={item.name} />\n                </ListItem>\n              )\n            })\n        }\n      </List>\n      <Box className={button} display='flex' justifyContent='center'>\n        <Button onClick={() => setDisplayDoneItems(!displayDoneItems)}>\n          {displayDoneItems ? 'Fertige einblenden' : 'Fertige ausblenden'}\n        </Button>\n      </Box>\n    </Box>\n  )\n}","import React, { useState } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { RouteComponentProps, Link } from \"@reach/router\"\nimport { IProduct } from './interfaces'\nimport { postEvent } from './client'\nimport ListItem from '@material-ui/core/ListItem'\nimport MuiLink from '@material-ui/core/Link'\nimport List from '@material-ui/core/List'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport CheckIcon from '@material-ui/icons/Check'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport LocalCafeIcon from '@material-ui/icons/LocalCafe'\nimport Chip from '@material-ui/core/Chip'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport { useRecoilValue } from 'recoil'\nimport { productsState, listIdState } from './atoms'\nimport { listItemsState } from './selectors'\nimport { CATEGORY_ORDER } from './constants'\n\ninterface ListConfigProps extends RouteComponentProps { }\n\nconst useStyles = makeStyles((theme) => {\n  return ({\n    listItemChecked: {\n      background: theme.palette.secondary.light!\n    },\n    chipContainer: {\n      height: '68px',\n      overflowX: 'scroll',\n    },\n    list: {\n      overflow: 'auto',\n      maxHeight: 'calc(100vh - 185px)'\n    }\n  })\n});\n\nexport default function ListConfig(props: ListConfigProps) {\n  const { listItemChecked, chipContainer, list } = useStyles()\n  const [activeCategories, setCategories] = useState<string[]>([])\n  const products = useRecoilValue(productsState)\n  const listItems = useRecoilValue(listItemsState)\n  const listId = useRecoilValue(listIdState)\n\n  const handleClick = (product: IProduct) => {\n    const payload = {\n      list_id: listId,\n      product_id: product.id,\n      type: ''\n    }\n    const selected = listItems.some(item => item.id === product.id)\n    if (selected) {\n      payload.type = 'item_removed'\n    } else {\n      payload.type = 'item_added'\n    }\n    return postEvent(payload);\n  }\n\n  const handleCategoryClick = (category: string) => {\n    const updatedCategories = activeCategories.includes(category) ? activeCategories.filter(c => c !== category) : [category]\n    return setCategories(updatedCategories)\n  }\n  const categories = Array.from(new Set(products.map(p => p.category)))\n\n  return (\n    <Box>\n      <Box p={2}>\n        <MuiLink align='center' display='block' component={Link} to={`/list/${listId}`}>Fertig</MuiLink>\n      </Box>\n      <Box p={1} display='flex' justifyContent='space-between' alignItems='space-between' flexDirection='column' flexWrap='wrap' className={chipContainer}>\n        {categories\n          .sort((a, b) =>\n            CATEGORY_ORDER.indexOf(a) - CATEGORY_ORDER.indexOf(b)\n          )\n          .map(category =>\n            <Chip key={category}\n              icon={<LocalCafeIcon />}\n              label={category}\n              color={activeCategories.includes(category) ? 'primary' : 'default'}\n              onClick={() => handleCategoryClick(category)}\n              clickable\n            />\n          )}\n      </Box>\n      <List className={list}>\n        {\n          products\n            .filter((product: IProduct) => activeCategories.length > 0 ? activeCategories.includes(product.category) : true)\n            .sort((a, b) =>\n              CATEGORY_ORDER.indexOf(a.category) - CATEGORY_ORDER.indexOf(b.category)\n            )\n            .map((product: IProduct) => {\n              const selected = listItems.some(item => item.id === product.id)\n              return (\n                <ListItem onClick={() => handleClick(product)} className={clsx(selected ? listItemChecked : '')} key={product.id} >\n                  <ListItemIcon>\n                    <LocalCafeIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={product.name} />{selected && <CheckIcon />}\n                </ListItem>\n              )\n            })\n        }\n      </List>\n    </Box>\n  )\n}\n\n","import { useRecoilState, useRecoilValue } from \"recoil\"\nimport { productsState } from \"./atoms\"\nimport { getProducts } from \"./client\"\nimport { IProduct, IShoppingItem } from \"./interfaces\"\nimport { listItemsState } from \"./selectors\"\n\n\nconst useProducts : () => [IProduct[], () => void] = () => {\n  const listItems = useRecoilValue(listItemsState)\n  const [products, setProducts] = useRecoilState(productsState)\n\n  const refetchProducts = () => {\n    getProducts()\n      .then(res => {\n        const newProducts: IProduct[] = res.data\n          .map(product => {\n            return ({\n              id: String(product.id),\n              name: product.product_name,\n              category: product.category,\n              selected: listItems.some(i => i.id === `${product.id}`)\n            })\n          })\n        setProducts(newProducts)\n      })\n  }\n\n  return [products, refetchProducts]\n}  \n\nexport default useProducts","import { useRecoilState } from \"recoil\"\nimport { shoppingListState } from \"./atoms\"\nimport { getShoppingLists } from \"./client\"\nimport { useEffect } from \"react\"\nimport { IShoppingList } from \"./interfaces\"\n\nconst useShoppingLists : () => [IShoppingList[], () => void ] = () => {\n  const [shoppingLists, setShoppingLists] = useRecoilState(shoppingListState) \n\n  const refetchShoppingLists = () => {\n    getShoppingLists()\n    .then((res) => setShoppingLists(res.data))\n  }\n\n  return [shoppingLists, refetchShoppingLists]\n}\n\nexport default useShoppingLists","import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport ListItem from '@material-ui/core/ListItem'\nimport List from '@material-ui/core/List'\nimport { RouteComponentProps } from \"@reach/router\"\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport AddIcon from '@material-ui/icons/Add'\nimport ListIcon from '@material-ui/icons/List'\nimport { ListItemText } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider'\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport Collapse from '@material-ui/core/Collapse';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { IShoppingList } from './interfaces'\nimport { Link } from '@reach/router'\nimport { postEvent, getShoppingLists, postNewProduct } from './client'\nimport { useRecoilValue, useRecoilState } from 'recoil'\nimport { shoppingListState } from './atoms'\nimport useProducts from './useProducts'\nimport useShoppingLists from './useShoppingLists'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n  isDeleted: {\n    backgroundColor: theme.palette.secondary.dark,\n  }\n}));\n\ninterface MenuProps extends RouteComponentProps { }\n\nexport default function Menu(props: MenuProps) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n  const [deleteOpen, setDeleteOpen] = React.useState(false);\n  const [newProductOpen, handleNewProductOpen] = React.useState(false) \n  const [newListTitle, setNewListTitle] = React.useState('')\n  const [listToDelete, selectListToDelete] = React.useState('')\n  const [newProductName, setNewProductName ] = React.useState('')\n  const [newProductCategory, setNewProductCategory ] = React.useState('')\n  const [products, refetchProducts] = useProducts()\n  const [shoppingLists, refetchShoppingLists] = useShoppingLists()\n\n  const handleDialogOpen = () => setDialogOpen(true);\n  const handleDialogClose = () => setDialogOpen(false);\n  const handleDeleteOpen = () => setDeleteOpen(true);\n\n  const handleDeleteClose = () => {\n    setDeleteOpen(false);\n  };\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const handleNewList = async () => {\n    handleDialogClose()\n    if (!newListTitle.trim()) return;\n    setNewListTitle('')\n    const payload = {\n      type: 'list_added',\n      name: newListTitle,\n    }\n    await postEvent(payload);\n    return refetchShoppingLists()\n  }\n\n  const handleListDelete = async () => {\n    handleDeleteClose()\n    if (!listToDelete.trim()) return;\n    selectListToDelete('')\n    const payload = {\n      type: 'list_removed',\n      list_id: listToDelete\n    }\n    refetchShoppingLists()\n    await postEvent(payload);\n    return refetchShoppingLists()\n  }\n\n  const handleNewProduct = async () => {\n    handleNewProductOpen(false)\n    if (!newProductName.trim()) return;\n    if (!newProductCategory.trim()) return;\n    setNewProductName('')\n    setNewProductCategory('')\n    await postNewProduct({ newProductName, newProductCategory })\n    return refetchProducts() \n  }\n\n  return (\n    <Box className={classes.root}>\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\n        <ListItem button>\n          <ListItemIcon>\n            <AddIcon />\n          </ListItemIcon>\n          <ListItemText onClick={handleDialogOpen} primary=\"Neuer Einkaufszettel\" />\n        </ListItem>\n        <ListItem button onClick={handleClick}>\n          <ListItemIcon>\n            <ListIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Einkaufslisten\" />\n          {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding>\n            {\n              shoppingLists.map(list => {\n                return (\n                  <ListItem key={list.id} component={Link} to={`/list/${list.id}`} button className={classes.nested}>\n                    <ListItemIcon>\n                      <StarBorder />\n                    </ListItemIcon>\n                    <ListItemText primary={list.name} />\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n        </Collapse>\n      </List>\n      <Divider />\n      <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n        <ListItem button>\n          <ListItemText onClick={handleDeleteOpen} primary=\"Löschen\" />\n        </ListItem>\n        <ListItem button>\n          <ListItemText onClick={() => handleNewProductOpen(true)} primary=\"Neues Produkt\" />\n        </ListItem>\n      </List>\n      <Dialog open={dialogOpen} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Neue Liste</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Bitte gib den Namen deiner Einkaufsliste ein.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            value={newListTitle}\n            label=\"Name\"\n            type=\"name\"\n            fullWidth\n            onChange={(event) => setNewListTitle(event.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} color=\"primary\">\n            Zurück\n          </Button>\n          <Button onClick={handleNewList} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={deleteOpen} onClose={handleDeleteClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Liste löschen</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Welche Liste möchtest du löschen?\n          </DialogContentText>\n          <List>\n            {shoppingLists.map(list => {\n              const isDeleted = listToDelete === list.id\n              return (\n                <ListItem key={list.id} onClick={() => selectListToDelete(list.id)} button className={isDeleted ? classes.isDeleted : ''}>\n                  <ListItemIcon>\n                    <StarBorder />\n                  </ListItemIcon>\n                  <ListItemText primary={list.name} />\n                </ListItem>\n              )\n            })\n            }\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDeleteClose} color=\"primary\">\n            Zurück\n          </Button>\n          <Button onClick={handleListDelete} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog open={newProductOpen} onClose={handleNewProductOpen} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Neues Produkt</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Bitte gib den Namen des neuen Produkts ein.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            value={newProductName}\n            label=\"Name\"\n            type=\"name\"\n            fullWidth\n            onChange={(event) => setNewProductName(event.target.value)}\n          />\n          <DialogContentText>\n            Bitte gib die Kategorie des neuen Produkts an\n          </DialogContentText>\n          <Select \n            id='category'\n            value={newProductCategory}\n            onChange={(evt) =>\n              { \n                const category = evt.target.value as string\n                setNewProductCategory(category)\n            }}\n          >\n            <MenuItem value='TK'>TK</MenuItem>\n            <MenuItem value='Backwaren'>Backwaren</MenuItem>\n            <MenuItem value='Kühlwaren'>Kühlwaren</MenuItem>\n            <MenuItem value='Getränke'>Getränke</MenuItem>\n            <MenuItem value='Trockenware'>Trockenware</MenuItem>\n            <MenuItem value='Obst & Gemüse'>Obst & Gemüse</MenuItem>\n            <MenuItem value='Drogerie'>Drogerie</MenuItem>\n            <MenuItem value='Snacks'>Snacks</MenuItem>\n          </Select>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => handleNewProductOpen(false)} color=\"primary\">\n            Zurück\n          </Button>\n          <Button onClick={handleNewProduct} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  )\n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Box from '@material-ui/core/Box'\nimport { navigate } from '@reach/router'\n\nconst useStyles = makeStyles((theme) => ({\n\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles()\n\n  return (\n    <Box flexGrow={1} >\n      <AppBar position=\"static\">\n        <Toolbar>\n             <IconButton onClick={() => navigate('/menu')} edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" >\n              <MenuIcon />\n             </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Einkaufsliste\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </Box>\n      )\n} ","import React from 'react'\nimport { Router } from '@reach/router'\nimport ShoppingList from './ShoppingList'\nimport ListConfig from './ListConfig'\nimport Menu from './Menu'\nimport Navbar from './Navbar'\nimport { IShoppingItem, IShoppingList, IProduct } from './interfaces'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/core'\n\ninterface AppPageProps { }\n\nconst useStyles = makeStyles(() => ({\n    page: {\n        boxSizing: 'border-box',\n        margin: '0',\n        padding: '0',\n        maxHeight: '100vh',\n        position: 'relative',\n        paddingBottom: '10vh'\n    }\n}))\n\nexport default function AppPage(props: AppPageProps) {\n    const { page } = useStyles()\n    return (\n        <Box className={page}>\n            <Navbar />\n            <Router >\n                <ShoppingList path=\"/list/:id\" />\n                <ListConfig path=\"/list/:id/edit\" />\n                <Menu  path=\"/menu\" />\n            </Router>\n        </Box>\n    )\n}","import React from 'react';\nimport { useEffect } from 'react'\nimport { ThemeProvider, createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\nimport AppPage from './AppPage'\nimport './App.css';\nimport useProducts from './useProducts';\nimport useListItems from './useListItems';\nimport useShoppingLists from './useShoppingLists';\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#57DBBE',\n      light: '#80FFE3'\n    },\n    secondary: {\n      main: '#915540',\n      light: '#DF9379'\n    }\n  },\n  typography: {\n    fontFamily: \n      `\n      Roboto Mono,\n      Roboto,\n      sans-serif\n      `\n  }\n})\ntheme = responsiveFontSizes(theme)\n\n\nfunction App() {\n  const [products, refetchProducts] = useProducts()\n  const [shoppingLists ,refetchShoppingLists ] = useShoppingLists()\n  useListItems()\n\n  useEffect(() => {\n    refetchProducts()\n    refetchShoppingLists()\n  },[])\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppPage />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { RecoilRoot } from 'recoil'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}